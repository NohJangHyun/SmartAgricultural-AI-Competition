### CODE _ STUB ###
"""

For 2023 스마트팜 AI 경진대회 예선 해커톤
Project : 누적 수확량 예측 모델

dataset = '2023_smartFarm_AI_hackathon_dataset.csv'

"""

#  -------------------------------------------
"""
입출력 양식을 
준수해 주십시오

###  INPUT ###
import pandas as pd
input_data = pd.read_csv('2023_smartFarm_AI_hackathon_dataset.csv')

{
    
    Write codes...
    
    # 학습 모델 변수 : model
    # (ex) model.fit()


}



### OUTPUT ###
print("RMSE:", rmse)
"""


# ------------------------------------------------


#      SAMPLE MODEL


# ------------------------------------------------


###  INPUT ###

import pandas as pd

input_data = pd.read_csv("2023_smartFarm_AI_hackathon_dataset.csv")
#  -------------------------------------------
###    Write codes...  ###
#      EXAMPLE CODE      #

"""
input_data = pd.read_csv('2023_smartFarm_AI_hackathon_dataset.csv')

Read CSV files from the given list of file paths and return DataFrames.

"""


# Read CSV files from the lists of file paths


# Now you have lists of DataFrames for each type of data (env, grw, prd)

input_data["outtrn_cumsum"] = input_data["outtrn"].cumsum()
input_data["HeatingEnergyUsage_cumsum"] = input_data["HeatingEnergyUsage"].cumsum()

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error


def calculate_rmse(targets, predictions):
    """
    Calculate the Root Mean Squared Error (RMSE) between predicted and target values.

    :param predictions: Predicted values.
    :type predictions: array-like
    :param targets: Target values.
    :type targets: array-like
    :return: RMSE value.
    :rtype: float
    """
    return np.sqrt(mean_squared_error(targets, predictions))


# ... (Data preprocessing code here)


# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
    X, Y, test_size=0.2, random_state=42
)

# Initialize and train the LinearRegression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict 'prd' values using the trained model
y_pred = model.predict(X_test)

# Calculate RMSE between the predictions and actual 'prd' values
rmse = calculate_rmse(y_test, prd_preds)


# Calculate r2_score between the predictions and actual 'y' values
def calculate_R2_score(y_test,y_pred):
    from sklearn.metrics import r2_score
    return r2_score(y_test, y_pred)


r2score = calculate_R2_score(y_test, y_pred)

# ------------------------------------------------
### OUTPUT ###
print("RMSE:", rmse)
print("R2_score:", r2score)